---

defaultRules:
  create: true
  rules:
    alertmanager: true
    etcd: false # managed by EKS control plane
    general: true
    k8s: true
    kubeApiserver: true
    kubePrometheusNodeRecording: true
    kubernetesApps: true
    kubernetesResources: true
    kubernetesStorage: true
    kubernetesSystem: true
    kubeScheduler: false # managed by EKS control plane
    network: true
    node: true
    prometheus: true
    prometheusOperator: true

  ## Labels for default rules
  labels: {}
  ## Annotations for default rules
  annotations:
    priority: 'high'

# Managed by EKS control plane
kubeEtcd:
  enabled: false
  service:
    enabled: false
  serviceMonitor:
    enabled: false

# Managed by EKS control plane
kubeScheduler:
  enabled: false
  service:
    enabled: false
  serviceMonitor:
    enabled: false

kubeControllerManager:
  enabled: false
  serviceMonitor:
    https: false

kubelet:
  enabled: true
  serviceMonitor:
    https: true

prometheus:
  prometheusSpec:
    replicas: 2
    externalUrl: 'https://prometheus.us-west-1.eks.dev.sec.openvpn.in'
    image:
      repository: quay.io/prometheus/prometheus
      tag: v2.26.0
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: gp2
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 10Gi
  podDisruptionBudget:
    enabled: true
    minAvailable: 1
  service:
    annotations:
      service.beta.kubernetes.io/aws-load-balancer-internal: "true"
    type: NodePort
    port: 9090
    targetPort: 9090
    nodePort: 30090
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: alb
      alb.ingress.kubernetes.io/scheme: internal
      alb.ingress.kubernetes.io/group.name: monitoring
      alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS": 443}]'
      alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-west-1:817264447024:certificate/c8e97576-20af-42a9-aeea-c8bb7933233d
      alb.ingress.kubernetes.io/success-codes: 200,302
      alb.ingress.kubernetes.io/auth-type: oidc
      alb.ingress.kubernetes.io/auth-idp-oidc: '{"issuer":"https://id.openvpn.in/auth/realms/OPENVPN.NET","authorizationEndpoint":"https://id.openvpn.in/auth/realms/OPENVPN.NET/protocol/openid-connect/auth","tokenEndpoint":"https://id.openvpn.in/auth/realms/OPENVPN.NET/protocol/openid-connect/token","userInfoEndpoint":"https://id.openvpn.in/auth/realms/OPENVPN.NET/protocol/openid-connect/userinfo","secretName":"keycloak-prometheus"}'
      alb.ingress.kubernetes.io/auth-scope: 'openid'
      alb.ingress.kubernetes.io/auth-on-unauthenticated-request: authenticate
      external-dns.alpha.kubernetes.io/hostname: prometheus.us-west-1.eks.dev.sec.openvpn.in
    hosts:
      - prometheus.us-west-1.eks.dev.sec.openvpn.in
    paths:
      - '/*'
  
  thanosService:
    enabled: true
    type: NodePort
  thanosServiceMonitor:
    enabled: true
    interval: 30s
  thanosIngress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: alb
      alb.ingress.kubernetes.io/scheme: internal
      alb.ingress.kubernetes.io/group.name: monitoring
      alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS": 443}]'
      alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-west-1:817264447024:certificate/c8e97576-20af-42a9-aeea-c8bb7933233d
      alb.ingress.kubernetes.io/success-codes: 200,302
      alb.ingress.kubernetes.io/auth-type: oidc
      alb.ingress.kubernetes.io/auth-idp-oidc: '{"issuer":"https://id.openvpn.in/auth/realms/OPENVPN.NET","authorizationEndpoint":"https://id.openvpn.in/auth/realms/OPENVPN.NET/protocol/openid-connect/auth","tokenEndpoint":"https://id.openvpn.in/auth/realms/OPENVPN.NET/protocol/openid-connect/token","userInfoEndpoint":"https://id.openvpn.in/auth/realms/OPENVPN.NET/protocol/openid-connect/userinfo","secretName":"keycloak-thanos"}'
      alb.ingress.kubernetes.io/auth-scope: 'openid'
      alb.ingress.kubernetes.io/auth-on-unauthenticated-request: authenticate
      external-dns.alpha.kubernetes.io/hostname: thanos.us-west-1.eks.dev.sec.openvpn.in
    hosts:
      - thanos.us-west-1.eks.dev.sec.openvpn.in
    paths:
      - '/*'
  
alertmanager:
  alertmanagerSpec:
    replicas: 2
    externalUrl: "https://alertmanager.us-west-1.eks.dev.sec.openvpn.in"
    image:
      repository: quay.io/prometheus/alertmanager
      tag: v0.21.0
    storage:
      volumeClaimTemplate:
        spec:
          storageClassName: gp2
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 10Gi
    resources:
      requests:
        cpu: "300m"
        memory: "300Mi"
      limits:
        cpu: "300m"
        memory: "300Mi"
  service:
    annotations:
      service.beta.kubernetes.io/aws-load-balancer-internal: "true"
    type: NodePort
    port: 9093
    targetPort: 9093
    nodePort: 30903
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: alb
      alb.ingress.kubernetes.io/scheme: internal
      alb.ingress.kubernetes.io/group.name: monitoring
      alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS": 443}]'
      alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-west-1:817264447024:certificate/c8e97576-20af-42a9-aeea-c8bb7933233d
      alb.ingress.kubernetes.io/success-codes: 200,302
      alb.ingress.kubernetes.io/auth-type: oidc
      alb.ingress.kubernetes.io/auth-idp-oidc: '{"issuer":"https://id.openvpn.in/auth/realms/OPENVPN.NET","authorizationEndpoint":"https://id.openvpn.in/auth/realms/OPENVPN.NET/protocol/openid-connect/auth","tokenEndpoint":"https://id.openvpn.in/auth/realms/OPENVPN.NET/protocol/openid-connect/token","userInfoEndpoint":"https://id.openvpn.in/auth/realms/OPENVPN.NET/protocol/openid-connect/userinfo","secretName":"keycloak-alertmanager"}'
      alb.ingress.kubernetes.io/auth-scope: 'openid'
      external-dns.alpha.kubernetes.io/hostname: alertmanager.us-west-1.eks.dev.sec.openvpn.in
    hosts:
      - alertmanager.us-west-1.eks.dev.sec.openvpn.in
    paths:
      - '/*'
  podDisruptionBudget:
    enabled: true
    minAvailable: 1
  config:
    global:
      resolve_timeout: 1m
    route:
      group_by: ['job']
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 2h
      receiver: 'slack'
      routes:
      - match:
          alertname: Watchdog
        receiver: 'null'
      - match:
          severity: 'critical'
        receiver: 'slack'
      - match_re:
          severity: '^(none|warning)$'
        receiver: 'slack'
      - match:
        receiver: 'null'
        continue: true
      - match:
          alertname: KubeControllerManager
        receiver: 'null'
      - match:
          alertname: KubeletDown
        receiver: 'null'
    receivers:
    - name: 'null'
    - name: 'slack'
      slack_configs:
      - api_url: 'https://hooks.slack.com/services/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'
        channel: '#alerts-dev'
        send_resolved: true
        title: '{{ template "openvpn_slack_title" . }}'
        text: '{{ template "slack_template.tmpl" . }}'
    templates: ["/etc/alertmanager/config/slack_template.tmpl"]
  templateFiles:
    slack_template.tmpl: |-
      {{ define "__single_message_title" }}{{ range .Alerts.Firing }}{{ .Labels.alertname }} @ {{ .Annotations.summary }}{{ end }}{{ range .Alerts.Resolved }}{{ .Labels.alertname }} @ {{ .Annotations.summary }}{{ end }}{{ end }}
      {{ define "openvpn_slack_title" }}[{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] :fire: {{ if or (and (eq (len .Alerts.Firing) 1) (eq (len .Alerts.Resolved) 0)) (and (eq (len .Alerts.Firing) 0) (eq (len .Alerts.Resolved) 1)) }}{{ template "__single_message_title" . }}{{ end }}{{ end }}
      {{ range .Alerts -}}
      *Description:* {{ .Annotations.description }}
      *Details:*
      {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* {{ .Value }}
      {{ end }}
      {{ end }}
      {{ with index .Alerts 0 -}}
        :chart_with_upwards_trend: *<{{ .GeneratorURL }}|PromQL Query>*
        {{- if .Annotations.runbook }} :notebook: *<{{ .Annotations.runbook }}|Runbook>*{{ end }}
      {{ end }}


grafana:
  image:
    repository: grafana/grafana
    tag: 7.5.3
  grafana.ini:
    server:
      root_url: "https://grafana.us-west-1.eks.dev.sec.openvpn.in"
    auth.generic_oauth:
      enabled: true
      name: 'OpenVPN SSO'
      auth_url: "https://id.openvpn.in/auth/realms/OPENVPN.NET/protocol/openid-connect/auth"
      token_url: "https://id.openvpn.in/auth/realms/OPENVPN.NET/protocol/openid-connect/token"
      api_url: "https://id.openvpn.in/auth/realms/OPENVPN.NET/protocol/openid-connect/userinfo"
      disable_login_form: false
      email_attribute_path: "email"
      scopes: "openid email profile"
      allow_sign_up: true
      role_attribute_path: "contains(groups[], '<admin-group') && 'Admin' || contains(groups[], 'editor-group') && 'Editor' || 'Viewer'"
    auth.proxy:
      enabled: true
  service:
    annotations:
      service.beta.kubernetes.io/aws-load-balancer-internal: "true"
    type: NodePort
    port: 3000
    targetPort: 3000
    nodePort: 30300
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: alb
      alb.ingress.kubernetes.io/scheme: internal
      alb.ingress.kubernetes.io/group.name: infra-internal
      alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS": 443}]'
      alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-west-1:817264447024:certificate/c8e97576-20af-42a9-aeea-c8bb7933233d
      alb.ingress.kubernetes.io/success-codes: 200,302
      external-dns.alpha.kubernetes.io/hostname: grafana.us-west-1.eks.dev.sec.openvpn.in
    hosts:
      - grafana.us-west-1.eks.dev.sec.openvpn.in
    path: /
  persistence:
    enabled: true
    size: 10Gi
  resources:
    requests:
      cpu: "800m"
      memory: "500Mi"
    limits:
      cpu: "800m"
      memory: "500Mi"

prometheusOperator:
  service:
    type: NodePort
    nodePort: 30080
    nodePortTls: 30443
  resources:
    requests:
      cpu: "200m"
      memory: "200Mi"
    limits:
      cpu: "200m"
      memory: "200Mi"
kube-state-metrics:
  service:
    type: NodePort
prometheus-node-exporter:
  service:
    type: NodePort
